/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package base;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author hp
 */
public class FrameMetodePembayaranIsi extends javax.swing.JFrame {

    /**
     * Creates new form FrameMetodePembayaranIsi
     */
    
    
    public static int rowCount;
    
    private FrameSignup dbManager;
    public FrameMetodePembayaranIsi() {
        initComponents();
        labelPesanan.setVisible(false);

        dbManager = new FrameSignup();
        dbManager.connect();  // Open the connection
        loadData(dbManager.getConnection());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bKembali = new javax.swing.JButton();
        labelPesanan = new javax.swing.JLabel();
        bPesan = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bKembali.setContentAreaFilled(false);
        bKembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bKembaliActionPerformed(evt);
            }
        });
        getContentPane().add(bKembali, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 23, 90, 40));

        labelPesanan.setFont(new java.awt.Font("Franklin Gothic Medium", 1, 36)); // NOI18N
        labelPesanan.setForeground(new java.awt.Color(0, 0, 0));
        labelPesanan.setText("TIDAK ADA PESANAN");
        getContentPane().add(labelPesanan, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 390, -1, 40));

        bPesan.setContentAreaFilled(false);
        bPesan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPesanActionPerformed(evt);
            }
        });
        getContentPane().add(bPesan, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 20, 170, 40));

        jTable1.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 18)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 0, 0));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Service", "Quantity", "Harga"
            }
        ));
        // Get the table header
        JTableHeader header = jTable1.getTableHeader();

        // Set font for the header
        header.setFont(new Font("Franklin Gothic Medium", Font.BOLD, 18));
        jTable1.setRowHeight(30); // Set the row height to 30 pixels
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 191, 960, 440));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui_component_asset/Metode_Pembayaran_isi.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bKembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bKembaliActionPerformed
        // TODO add your handling code here:
        FramePemesanan ps = new FramePemesanan();
            ps.setVisible(true);
            ps.pack();
            ps.setLocationRelativeTo(null);
            this.dispose();
    }//GEN-LAST:event_bKembaliActionPerformed

    private void bPesanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPesanActionPerformed
        // TODO add your handling code here:
        addInvoice(dbManager.getConnection());
        updateStatus(dbManager.getConnection());
        dbManager.disconnect();
        
        
        FrameHome hm = new FrameHome();
            hm.setVisible(true);
            hm.pack();
            hm.setLocationRelativeTo(null);
            hm.setDefaultCloseOperation(FrameLogin.EXIT_ON_CLOSE);
            this.dispose();
        
    }//GEN-LAST:event_bPesanActionPerformed
    
    
    private int getRowCount(Connection conn) {
        int rowCount = 0;

        try {
            String query = "SELECT COUNT(*) AS row_count FROM " + FrameLogin.usernameLogin.concat("_db");

            PreparedStatement preparedStatement = conn.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            // Check if the result set has data
            if (resultSet.next()) {
                // Retrieve the count from the "row_count" column
                rowCount = resultSet.getInt("row_count");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return rowCount;
    }
    
    private void addInvoice(Connection conn){
        try {
            rowCount = getRowCount(dbManager.getConnection());
            
            String invoice;
            for (int i = 1; i <= rowCount; i++){
                if (i < 10){
                    invoice = "SK-"+ FrameLogin.usernameLogin +"-132500";
                } 
                else if (i < 100 && i >= 10){
                    invoice = "SK-"+ FrameLogin.usernameLogin +"-13250";
                }
                else {
                    invoice = "SK-"+ FrameLogin.usernameLogin +"-1325";
                }
                
                String query = "UPDATE " + FrameLogin.usernameLogin.concat("_db") + " SET invoice = '" 
                         + invoice.concat(String.valueOf(i)) + "' WHERE invoice = '" + i + "'";
                
                try (PreparedStatement preparedStatement = conn.prepareStatement(query)) {
                    int rowsUpdated = preparedStatement.executeUpdate();

                    if (rowsUpdated > 0) {
                        System.out.println("Status updated successfully.");
                    } else {
                        System.out.println("No rows were updated.");
                    }
                }
            }
            
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void updateStatus(Connection conn) {
        try {
            String query = "UPDATE " + FrameLogin.usernameLogin.concat("_db") + " SET status = 'Sedang Progres' WHERE status = 'Belum Bayar'";

            try (PreparedStatement preparedStatement = conn.prepareStatement(query)) {
                int rowsUpdated = preparedStatement.executeUpdate();

                if (rowsUpdated > 0) {
                    System.out.println("Status updated successfully.");
                } else {
                    System.out.println("No rows were updated.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } 
    }
    
    private void loadData(Connection conn) {
        try {
            String query = "SELECT jenisJasa, jumSepatu, harga FROM " + FrameLogin.usernameLogin.concat("_db") 
                         + " WHERE status = 'Belum Bayar'";

            PreparedStatement preparedStatement = conn.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();
            
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            
            if (!resultSet.next()){
                 labelPesanan.setVisible(true);
            } else {
                do {
                    Object[] rowData = new Object[resultSet.getMetaData().getColumnCount()];
                    for (int i = 1; i <= rowData.length; i++) {
                        rowData[i - 1] = resultSet.getObject(i);
                    }
                    model.addRow(rowData);
                } while (resultSet.next());
            }
            
            
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
    }

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameMetodePembayaranIsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameMetodePembayaranIsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameMetodePembayaranIsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameMetodePembayaranIsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameMetodePembayaranIsi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bKembali;
    private javax.swing.JButton bPesan;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelPesanan;
    // End of variables declaration//GEN-END:variables
}
